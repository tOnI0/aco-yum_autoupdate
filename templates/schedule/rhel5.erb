#!/bin/sh
# ******************
# Managed by Puppet
# ******************

LOCKFILE=/var/lock/yum-cron.lock

# Only run if this flag file is set (by /etc/rc.d/init.d/yum-cron)
if [ ! -f /var/lock/subsys/yum-cron ]; then
  exit 0
fi

# Try mkdir for the lockfile, will test for and make it in one atomic action
mkdir $LOCKFILE 2>/dev/null || exit
# and clean up that lockfile if the script exits or is killed  
trap "{ rmdir $LOCKFILE 2>/dev/null ; exit ; }" INT TERM EXIT

# Grab config settings
if [ -f <%= @config_path %> ]; then
  source <%= @config_path %>
fi

# if DOWNLOAD_ONLY is set then we force CHECK_ONLY too.
# Gotta check before one can download!
if [[ "x$DOWNLOAD_ONLY" == "xyes" ]]; then
  CHECK_ONLY=yes
fi

YUMTMP=$(mktemp /var/run/yum-cron.XXXXXX)
touch $YUMTMP
{
# Then check for updates and/or do them, as configured
if [[ "x$CHECK_ONLY" == "xyes" ]]; then
  if (! /usr/bin/yum<% if @randomwait != '0' -%> -R $RANDOMWAIT<% end %> -e 0 -d 0 -y check-update >/dev/null); then
    echo "New updates available for host `/bin/hostname`";
    echo -e "`/usr/bin/yum -e ${ERROR_LEVEL:-0} -d${DEBUG_LEVEL:-0} -y -C check-update`\n"
    if [[ "x$DOWNLOAD_ONLY" == "xyes" ]]; then
      /usr/bin/yum -e 0 -d 0 -y --downloadonly update>/dev/null
      echo "Updates downloaded, use \"yum -C update\" manually to install them."
    fi
  fi
else
  /usr/bin/yum $YUM_PARAMETER<% if @randomwait != '0' -%> -R $RANDOMWAIT<% end %> -e ${ERROR_LEVEL:-0} -d${DEBUG_LEVEL:-0} -y shell /etc/yum/yum-daily.yum
fi
} >> $YUMTMP 2>&1

# set default for SYSTEMNAME
[ -z "$SYSTEMNAME" ]  && SYSTEMNAME=$(hostname)

if [ ! -z "$MAILTO" ] && [ -x /bin/mail ]; then
# if MAILTO is set, use mail command (ie better than standard mail with cron output)
  [ -s "$YUMTMP" ] && mail -s "System update: $SYSTEMNAME" $MAILTO < $YUMTMP
else
# default behavior is to use cron's internal mailing of output from cron-script
  cat $YUMTMP
fi
rm -f $YUMTMP

exit 0
